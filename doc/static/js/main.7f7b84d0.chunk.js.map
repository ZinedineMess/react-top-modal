{"version":3,"sources":["lib/components/Spinner/Spinner.js","lib/components/Modal/Modal.js","lib/utils/useModal.js","App.js","index.js"],"names":["Spinner","props","className","customClassName","tabIndex","role","Modal","isShowing","hide","children","addCloseEscape","addCloseOverlay","addCloseIcon","addFooterButton","spinner","useEffect","window","addEventListener","e","closeModalEvent","closeModal","key","ReactDom","createPortal","onClick","type","document","getElementById","defaultProps","useModal","useState","setIsShowing","isLoading","setIsLoading","toggle","toggleSpinner","App","showModal","toggleModal","showModalWithCloseEsc","toggleModalWithCloseEsc","showModalWithCloseOverlay","toggleModalWithCloseOverlay","showModalWithFooterButton","toggleModalWithFooterButton","showModalWithSpinner","toggleModalSpinner","showSpinner","showModalWithClassName","toggleModalWithClassName","setTimeout","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7f7b84d0.chunk.js","sourcesContent":["import 'lib/components/Spinner/Spinner.css';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Spinner = props => {\n    return (\n        <div className={`modalOverlay ${props.customClassName ? 'modalOverlay-' + props.customClassName : ''}`}> \n            <aside \n                className={`modalWrapper ${props.customClassName ? 'modalWrapper-' + props.customClassName : ''}`}\n                aria-modal \n                aria-hidden \n                tabIndex={-1} \n                role='dialog'\n            > \n                <section className={`modal ${props.customClassName ? 'modal-' + props.customClassName : ''}`}>\n                    <article className={`modalSection ${props.customClassName ? 'modalBody-' + props.customClassName : ''}`}>\n                        <div className={`spinner ${props.customClassName ? 'loader-' + props.customClassName : ''}`}></div>\n                    </article>\n                </section>\n            </aside>\n        </div>\n    );\n}\n\nSpinner.propTypes = {\n    customClassName: PropTypes.string,\n};\n\nexport default Spinner;\n","import { FaTimes } from 'react-icons/fa';\nimport 'lib/components/Modal/Modal.css';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport ReactDom from 'react-dom';\nimport Spinner from 'lib/components/Spinner/Spinner';\n\n/**\n * React component allowing to create a modal with different customization parameters\n * @param {bool} isShowing - Allows you to display the modal\n * @param {func} hide - Allows you to remove the modal\n * @param {array} children - Array containing the body of the modal\n * @param {bool} addCloseEscape - Allows to add the functionality of modal closure using the 'Esc' key\n * @param {bool} addCloseOverlay - Allows to add the functionality of modal closing by clicking on the overlay\n * @param {bool} addCloseIcon - Allows to add or not the modal closing icon\n * @param {string} customClassName - Allows you to customize the class name of each element\n * @param {bool} addFooterButton - Allows to add or not a button present in the footer of the modal\n * @param {bool} spinner - Allows to add or not a spinner during the loading of the modal\n * @return {void}\n */\nconst Modal = ({ \n    isShowing, hide, children, addCloseEscape, addCloseOverlay, addCloseIcon, customClassName, addFooterButton, spinner,\n}) => {\n    useEffect(() => {\n        return window.addEventListener('keyup', (e) => {\n            if (addCloseEscape) {\n                closeModalEvent(e);\n            }\n        });\n    });\n\n    /**\n     * Function allowing to close the modal if it is present on the screen\n     * @return {void}\n     */\n    const closeModal = () => {\n        if (isShowing) {\n            hide();\n        };\n    };\n\n    /**\n     * Function used to close the modal when the Esc key is clicked\n     * @param {event} e\n     * @return {void}\n     */\n    const closeModalEvent = e => {\n        if(e.key === 'Escape') {\n            closeModal();\n        };\n    };\n\n    return isShowing ? ReactDom.createPortal(\n        <div>\n            <div \n                className={`modalOverlay ${customClassName ? 'modalOverlay-' + customClassName : ''}`} \n                onClick={addCloseOverlay ? closeModal : null}\n            >\n                <aside className={`modalWrapper ${customClassName ? 'modalWrapper-' + customClassName : ''}`}>\n                    <section className={`modal ${customClassName ? 'modal-' + customClassName : ''}`}>\n                        <header className={`modalHeader ${customClassName ? 'modalHeader-' + customClassName : ''}`} >\n                            {addCloseIcon \n                                && (\n                                    <button \n                                        aria-label='Close' \n                                        className={`modalCloseButton ${customClassName ? 'modalCloseButton-' + customClassName : ''}`}\n                                        data-dismiss='modal' \n                                        onClick={hide}\n                                        type='button' \n                                    >\n                                        <FaTimes/>\n                                    </button>\n                                )\n                            }\n                        </header>\n                        <section className={`modalSection ${customClassName ? 'modalSection-' + customClassName : ''}`}>\n                            {children}\n                        </section>\n                        <footer className={`modalFooter ${customClassName ? 'modalFooter-' + customClassName : ''}`}>\n                            {addFooterButton\n                                && (\n                                    <button \n                                        className={`modalButton ${customClassName ? 'modalButton-' + customClassName : ''}`} \n                                        onClick={hide}\n                                    >\n                                        Close Modal\n                                    </button>\n                                )\n                            }\n                        </footer>\n                    </section>\n                </aside>\n            </div>    \n        </div>,\n        document.getElementById('portal')\n    ) : spinner \n    ? ReactDom.createPortal\n    (\n        <Spinner customClassName={customClassName}/>, document.getElementById('portal')\n    )\n    : null;\n};\n\nModal.defaultProps = {\n    isShowing: false,\n    addCloseEscape: false,\n    addCloseOverlay: false,\n    addCloseIcon: true,\n    addFooterButton: false,\n    spinner: false,\n};\n\nModal.propTypes = {\n    isShowing: PropTypes.bool.isRequired,\n    hide: PropTypes.func.isRequired,\n    children: PropTypes.array,\n    addCloseEscape: PropTypes.bool,\n    addCloseOverlay: PropTypes.bool,\n    addCloseIcon: PropTypes.bool,\n    customClassName: PropTypes.string,\n    addFooterButton: PropTypes.bool,\n    spinner: PropTypes.bool,\n};\n\nexport default Modal;\n","import {\n    useState\n} from 'react';\n\nconst useModal = () => {\n    const [isShowing, setIsShowing] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    /**\n     * Function allowing to change the state in order to make the modal appear or not\n     * If the modal is displayed, we remove the spinner\n     * @return {void}\n     */\n    const toggle = () => {\n        setIsShowing(!isShowing);\n        if (!isShowing) {\n            setIsLoading(false);\n        };\n    };\n\n    /**\n     * Function allowing to change the state in order to make the spinner appear or not\n     * @return {void}\n     */\n    const toggleSpinner = () => {\n        setIsLoading(!isLoading);\n    };\n\n    return {\n        isShowing,\n        toggle,\n        isLoading,\n        toggleSpinner\n    };\n};\n\nexport default useModal;\n","import 'App.css';\nimport Modal from 'lib/components/Modal/Modal';\nimport React from 'react';\nimport useModal from 'lib/utils/useModal';\n\nconst App = () => {\n  const {isShowing : showModal, toggle : toggleModal} = useModal();\n  const {isShowing : showModalWithCloseEsc, toggle : toggleModalWithCloseEsc} = useModal();\n  const {isShowing : showModalWithCloseOverlay, toggle : toggleModalWithCloseOverlay} = useModal();\n  const {isShowing : showModalWithFooterButton, toggle : toggleModalWithFooterButton} = useModal();\n  const {isShowing : showModalWithSpinner, toggle : toggleModalSpinner, isLoading: showSpinner, toggleSpinner} = useModal();\n  const {isShowing : showModalWithClassName, toggle : toggleModalWithClassName} = useModal();\n\n  /**\n   * Function allowing to display the loader during the indicated time\n   * @return {void}\n   */\n  const spinnerTimer = () => {\n    toggleSpinner();\n\n    setTimeout(() => {\n      toggleModalSpinner();\n    }, 1000);\n  };\n\n  return (\n    <>\n      <main>\n        <button type='submit' className='buttonDefault' onClick={toggleModal}>Modal (classic Modal)</button>\n        <Modal \n          isShowing={showModal} \n          hide={toggleModal} \n          addCloseIcon={true}\n        >\n          <h1>Hello, Modal 1 </h1>\n          <p>bla bla bla 1</p>\n        </Modal>\n\n        <button type='submit' className='buttonDefault' onClick={toggleModalWithCloseEsc}>Modal (with closeEscape)</button>\n        <Modal \n          isShowing={showModalWithCloseEsc} \n          hide={toggleModalWithCloseEsc} \n          addCloseIcon={true} \n          addCloseEscape={true}\n        >\n          <h1>Hello, Modal 2 </h1>\n          <p>bla bla bla 2</p>\n        </Modal>\n\n        <button type='submit' className='buttonDefault' onClick={toggleModalWithCloseOverlay}>Modal (with closeOverlay)</button>\n        <Modal \n          isShowing={showModalWithCloseOverlay} \n          hide={toggleModalWithCloseOverlay} \n          addCloseIcon={true} \n          addCloseOverlay={true}\n        >\n          <h1>Hello, Modal 3 </h1>\n          <p>bla bla bla 3</p>\n        </Modal>\n\n        <button type='submit' className='buttonDefault' onClick={toggleModalWithFooterButton}>Modal (with footerButton)</button>\n        <Modal \n        isShowing={showModalWithFooterButton} \n        hide={toggleModalWithFooterButton} \n        addCloseIcon={false} \n        addCloseOverlay={true} \n        addFooterButton={true}\n        >\n          <h1>Hello, Modal 4 </h1>\n          <p>bla bla bla 4</p>\n        </Modal>\n\n        <button type='submit' className='buttonDefault' onClick={spinnerTimer}>Modal (with loader after 1s)</button>\n        <Modal \n          isShowing={showModalWithSpinner} \n          hide={toggleModalSpinner} \n          spinner={showSpinner}\n          addCloseIcon={false} \n          addCloseOverlay={true} \n          addFooterButton={true}\n        >\n          <h1>Hello, Modal 5 </h1>\n          <p>bla bla bla 5 </p>\n        </Modal>\n\n        <button type='submit' className='buttonDefault' onClick={toggleModalWithClassName}>Modal (with customClassName)</button>\n        <Modal \n        isShowing={showModalWithClassName} \n        hide={toggleModalWithClassName} \n        addCloseIcon={false} \n        addCloseOverlay={true} \n        addFooterButton={true}\n        customClassName='custom'\n        >\n          <h1>Hello, Modal 6 </h1>\n          <p>bla bla bla 6</p>\n        </Modal>\n        \n      </main>\n    </>\n  );\n};\n\nexport default App;\n","import App from 'App';\nimport 'index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}