{"version":3,"sources":["lib/components/Spinner/Spinner.js","lib/components/Modal/Modal.js","lib/utils/useModal.js","App.js","index.js"],"names":["Spinner","props","className","customClassName","tabIndex","role","Modal","isOpen","showModal","activeModal","close","children","addCloseEscape","addCloseOverlay","addCloseIcon","addFooterButton","spinner","useEffect","window","addEventListener","e","closeModalEvent","closeModal","key","ReactDOM","createPortal","onClick","type","document","body","defaultProps","useModal","useState","setShowModal","setActiveModal","isLoading","setIsLoading","handleOpenModal","val","handleCloseModal","toggleSpinner","App","setTimeout","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.94b5f686.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport './Spinner.css';\n\nconst Spinner = props => {\n    return (\n        <div className={`modalOverlay ${props.customClassName ? 'modalOverlay-' + props.customClassName : ''}`}> \n            <aside \n                className={`modalWrapper ${props.customClassName ? 'modalWrapper-' + props.customClassName : ''}`}\n                aria-modal \n                aria-hidden \n                tabIndex={-1} \n                role='dialog'\n            > \n                <section className={`modal ${props.customClassName ? 'modal-' + props.customClassName : ''}`}>\n                    <article className={`modalSection ${props.customClassName ? 'modalBody-' + props.customClassName : ''}`}>\n                        <div className={`spinner ${props.customClassName ? 'loader-' + props.customClassName : ''}`}></div>\n                    </article>\n                </section>\n            </aside>\n        </div>\n    );\n}\n\nSpinner.propTypes = {\n    customClassName: PropTypes.string,\n};\n\nexport default Spinner;\n","import { FaTimes } from 'react-icons/fa';\nimport './Modal.css';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Spinner from '../Spinner/Spinner';\n\n/**\n * React component allowing to create a modal with different customization parameters\n * @param {object} isOpen - Allows you to display the modal\n * @param {bool} showModal - Allows you to display the modal\n * @param {string} activeModal - Allows you to display the modal\n * @param {func} close - Function allows you to remove the modal\n * @param {array} children - Array containing the body of the modal\n * @param {bool} addCloseEscape - Allows to add the functionality of modal closure using the 'Esc' key\n * @param {bool} addCloseOverlay - Allows to add the functionality of modal closing by clicking on the overlay\n * @param {bool} addCloseIcon - Allows to add or not the modal closing icon\n * @param {string} customClassName - Allows you to customize the class name of each element\n * @param {bool} addFooterButton - Allows to add or not a button present in the footer of the modal\n * @param {bool} spinner - Allows to add or not a spinner during the loading of the modal\n * @return {void}\n */\nconst Modal = ({\n    isOpen={\n        showModal : false,\n        activeModal: '',\n    },\n    close,\n    children,\n    addCloseEscape,\n    addCloseOverlay,\n    addCloseIcon,\n    customClassName,\n    addFooterButton,\n    spinner\n}) => {\n    useEffect(() => {\n        return window.addEventListener('keyup', (e) => {\n            if (addCloseEscape) {\n                closeModalEvent(e);\n            }\n        });\n    });\n\n    /**\n     * Function allowing to close the modal if it is present on the screen\n     * @return {void}\n     */\n    const closeModal = () => {\n        if (isOpen) {\n            close();\n        };\n    };\n\n    /**\n     * Function used to close the modal when the Esc key is clicked\n     * @param {event} e\n     * @return {void}\n     */\n    const closeModalEvent = e => {\n        if(e.key === 'Escape') {\n            closeModal();\n        };\n    };\n\n    return isOpen \n    ? ReactDOM.createPortal(\n        <div \n            className={`modalOverlay ${customClassName ? 'modalOverlay-' + customClassName : ''}`} \n            onClick={addCloseOverlay ? closeModal : null}\n        >\n            <aside className={`modalWrapper ${customClassName ? 'modalWrapper-' + customClassName : ''}`}>\n                <section className={`modal ${customClassName ? 'modal-' + customClassName : ''}`}>\n                    <header className={`modalHeader ${customClassName ? 'modalHeader-' + customClassName : ''}`} >\n                        {addCloseIcon \n                            && (\n                                <button \n                                    aria-label='Close' \n                                    className={`modalCloseButton ${customClassName ? 'modalCloseButton-' + customClassName : ''}`}\n                                    data-dismiss='modal' \n                                    onClick={close}\n                                    type='button' \n                                >\n                                    <FaTimes/>\n                                </button>\n                            )\n                        }\n                    </header>\n                    <section className={`modalSection ${customClassName ? 'modalSection-' + customClassName : ''}`}>\n                        {children}\n                    </section>\n                    <footer className={`modalFooter ${customClassName ? 'modalFooter-' + customClassName : ''}`}>\n                        {addFooterButton\n                            && (\n                                <button \n                                    className={`modalButton ${customClassName ? 'modalButton-' + customClassName : ''}`} \n                                    onClick={close}\n                                >\n                                    Close Modal\n                                </button>\n                            )\n                        }\n                    </footer>\n                </section>\n            </aside>\n        </div>, document.body\n    )\n    : spinner \n    ? ReactDOM.createPortal\n(\n    <Spinner customClassName={customClassName}/>, document.body\n)\n: null;\n};\n\nModal.defaultProps = {\n    addCloseEscape: false,\n    addCloseOverlay: false,\n    addCloseIcon: true,\n    addFooterButton: false,\n    spinner: false,\n};\n\nModal.propTypes = {\n    close: PropTypes.func.isRequired,\n    addCloseEscape: PropTypes.bool,\n    addCloseOverlay: PropTypes.bool,\n    addCloseIcon: PropTypes.bool,\n    customClassName: PropTypes.string,\n    addFooterButton: PropTypes.bool,\n    spinner: PropTypes.bool,\n};\n\nexport default Modal;\n","import { useState } from 'react';\n\nconst useModal = () => {\n    const [showModal, setShowModal] = useState(false);\n    const [activeModal, setActiveModal] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    const handleOpenModal = val => {\n        setActiveModal(val);\n        setShowModal(!showModal);\n        if (!showModal) {\n            setIsLoading(false);\n        }\n    };\n    \n    const handleCloseModal = () => {\n        setShowModal(!showModal);\n        setActiveModal('');\n    };\n\n    const toggleSpinner = () => {\n        setIsLoading(!isLoading);\n    }\n\n    return {\n        showModal, activeModal, handleOpenModal, handleCloseModal, isLoading, toggleSpinner\n    };\n};\n\nexport default useModal;\n","import './App.css';\nimport Modal from 'lib/components/Modal/Modal';\nimport useModal from 'lib/utils/useModal';\n\nconst App = () => {\n  const { showModal, activeModal, handleOpenModal, handleCloseModal, isLoading, toggleSpinner } = useModal();\n\n  const spinnerTimer = () => {\n    toggleSpinner();\n\n    setTimeout(() => {\n      handleOpenModal('spinner');\n    }, 1000);\n  };\n\n  return (\n    <main>\n      <button type='button' className='buttonDefault' onClick={() => handleOpenModal('classic')}>Modal (classic Modal)</button>\n      <Modal isOpen={ showModal && activeModal === 'classic' } close={handleCloseModal}>\n        <h2>classic</h2>\n      </Modal>\n\n      <button type='button' className='buttonDefault' onClick={() => handleOpenModal('closeEscape')}>Modal (with closeEscape)</button>\n      <Modal isOpen={ showModal && activeModal === 'closeEscape' } close={handleCloseModal} addCloseEscape={true}>\n        <h2>closeEscape</h2>\n      </Modal>\n\n      <button type='button' className='buttonDefault' onClick={() => handleOpenModal('closeOverlay')}>Modal (with closeOverlay)</button>\n      <Modal isOpen={ showModal && activeModal === 'closeOverlay' } close={handleCloseModal} addCloseOverlay={true}>\n        <h2>closeOverlay</h2>\n      </Modal>\n\n      <button type='button' className='buttonDefault' onClick={() => handleOpenModal('footerButton')}>Modal (with footerButton)</button>\n      <Modal isOpen={ showModal && activeModal === 'footerButton' } close={handleCloseModal} addFooterButton={true} addCloseIcon={false}>\n        <h2>footerButton</h2>\n      </Modal>\n\n      <button type='button' className='buttonDefault' onClick={() => handleOpenModal('customClassName')}> Modal (with customClassName)</button>\n      <Modal isOpen={ showModal && activeModal === 'customClassName' } close={handleCloseModal} customClassName='custom'>\n        <h2>customClassName</h2>\n      </Modal>\n\n      <button type='button' className='buttonDefault' onClick={spinnerTimer}>Modal (with spinner 1s)</button>\n      <Modal isOpen={ showModal && activeModal === 'spinner' } close={handleCloseModal} spinner={isLoading}>\n        <h2>spinner</h2>\n      </Modal>\n    </main>\n  );\n};\n\nexport default App;\n","import App from './App';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}